#include <iostream>
#include<cstring>
#include<string>
#include<algorithm>
using namespace std;
string extractStringAtKey(string str, int key){
    char *input = (char *)str.c_str();
    char *s= strtok(input," ");
    while(key>1){
        s= strtok(NULL, " ");
        key--;
    }
    return (string)s;
    
}
int stringToInt(string str){
    int ans=0;
    int p=1;
    for (int i=0;i<str.length();i++){
        ans=ans*10+(str[i]-'0');
    }
    return ans;
}
bool lexicographicCompare(pair<string,string>s1,pair<string, string>s2){
    string key1,key2;
    key1= s1.second;
    key2= s2.second;
    return key1<key2;
}
bool numericCompare(pair<string,string>s1,pair<string, string>s2){
    string key1,key2;
    key1= s1.second;
    key2= s2.second;
    return stringToInt(key1) < stringToInt(key2);
}
int main() {
    int n,key;
    string reversal;
    string sorting;
    cin>>n>>key>>reversal>>sorting;
    string s[100];
    cin.get();
    for(int i=0;i<n;i++){
        getline(cin, s[i]);
        //cout<<s[i]<<endl;
    }
    pair<string, string> strPair[100];
    //making pair of string and key token
    for (int i=0;i<n;i++){
        strPair[i].first= s[i];
        strPair[i].second=extractStringAtKey(s[i],key);
    }
    //sorting the list as per requirement
    if(sorting=="numeric"){
        sort(strPair, strPair+n, numericCompare);
    }
    else {
        sort(strPair, strPair+n, lexicographicCompare);
    }
    //reversing the string if asked
    if(reversal=="true"){
        for (int i=0;i<n/2;i++){
            swap(strPair[i], strPair[n-i-1]);
        }
    }
    //output
    for (int i=0;i<n;i++){
        cout<<strPair[i].first<<endl;
    }
    return 0;
}
